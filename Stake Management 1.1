import typing as t
import functools
import dataclasses
import itertools
import operator
from datetime import datetime, timedelta
from enum import Enum, auto
from uuid import uuid4
from abc import ABC, abstractmethod
from typing import Generic, TypeVar, Optional, List, Dict, Callable

T = TypeVar('T')

class StakeError(Exception):
    """Base exception for stake-related errors."""
    pass

class StakeType(Enum):
    """Enumeration of supported stake types."""
    FINANCIAL = auto()
    PROJECT_CONTRIBUTION = auto()
    TIME_COMMITMENT = auto()
    RESOURCE_ALLOCATION = auto()
    CUSTOM = auto()

@dataclasses.dataclass(frozen=True)
class StakeMetrics:
    """Immutable stake performance metrics."""
    total_value: float
    return_rate: float
    risk_factor: float

class StakeValidationStrategy(ABC, Generic[T]):
    """Abstract base class for stake validation strategies."""
    @abstractmethod
    def validate(self, stake: T) -> bool:
        """Validate a stake according to specific criteria."""
        pass

@dataclasses.dataclass(slots=True)
class Stake:
    """Comprehensive stake representation with advanced features."""
    id: str = dataclasses.field(default_factory=lambda: str(uuid4()))
    name: str = ''
    type: StakeType = StakeType.CUSTOM
    amount: float = 0.0
    interest_rate: float = 0.0
    duration_days: int = 0
    start_date: datetime = dataclasses.field(default_factory=datetime.now)
    notes: Optional[str] = None
    
    @functools.cached_property
    def projected_return(self) -> float:
        """Calculate projected return using compound interest logic."""
        return self.amount * (1 + self.interest_rate/100) ** (self.duration_days/365)
    
    def __post_init__(self):
        """Validate stake upon initialization."""
        if self.amount < 0:
            raise StakeError("Stake amount cannot be negative")

class ComplexStakeManager:
    """Advanced stake management system with sophisticated tracking."""
    def __init__(self, validation_strategy: Optional[StakeValidationStrategy] = None):
        self._stakes: Dict[str, Stake] = {}
        self._validation_strategy = validation_strategy or DefaultStakeValidationStrategy()
    
    def create_stake(self, stake: Stake) -> Stake:
        """Create and validate a new stake with advanced checks."""
        if not self._validation_strategy.validate(stake):
            raise StakeError("Stake validation failed")
        
        self._stakes[stake.id] = stake
        return stake
    
    def aggregate_stakes(self, predicate: Optional[Callable[[Stake], bool]] = None) -> StakeMetrics:
        """Calculate aggregate metrics across stakes with optional filtering."""
        filtered_stakes = (
            stake for stake in self._stakes.values() 
            if predicate is None or predicate(stake)
        )
        
        metrics = [
            StakeMetrics(
                total_value=stake.projected_return,
                return_rate=stake.interest_rate,
                risk_factor=stake.duration_days / 365
            ) for stake in filtered_stakes
        ]
        
        return StakeMetrics(
            total_value=sum(m.total_value for m in metrics),
            return_rate=sum(m.return_rate for m in metrics) / len(metrics) if metrics else 0,
            risk_factor=sum(m.risk_factor for m in metrics) / len(metrics) if metrics else 0
        )

class DefaultStakeValidationStrategy(StakeValidationStrategy[Stake]):
    """Default implementation of stake validation strategy."""
    def validate(self, stake: Stake) -> bool:
        """Implement basic validation logic."""
        return (
            stake.amount > 0 and 
            stake.duration_days > 0 and 
            stake.interest_rate >= 0
        )

def create_stake_from_dict(stake_data: Dict[str, t.Any]) -> Stake:
    """Factory method to create stakes from dictionary input."""
    return Stake(
        name=stake_data.get('name', ''),
        type=stake_data.get('type', StakeType.CUSTOM),
        amount=float(stake_data.get('amount', 0)),
        interest_rate=float(stake_data.get('interest_rate', 0)),
        duration_days=int(stake_data.get('duration_days', 0)),
        notes=stake_data.get('notes')
    )

def main():
    """Demonstration of advanced stake management capabilities."""
    manager = ComplexStakeManager()
    
    stakes_data = [
        {
            'name': 'Research Grant',
            'type': StakeType.PROJECT_CONTRIBUTION,
            'amount': 50000,
            'interest_rate': 5.5,
            'duration_days': 365,
            'notes': 'Academic research funding'
        },
        {
            'name': 'Tech Startup Investment',
            'type': StakeType.FINANCIAL,
            'amount': 100000,
            'interest_rate': 8.2,
            'duration_days': 540,
            'notes': 'Early-stage venture capital'
        }
    ]
    
    for stake_dict in stakes_data:
        stake = create_stake_from_dict(stake_dict)
        manager.create_stake(stake)
    
    total_metrics = manager.aggregate_stakes()
    print(f"Total Projected Value: ${total_metrics.total_value:.2f}")
    print(f"Average Return Rate: {total_metrics.return_rate:.2f}%")
    print(f"Aggregate Risk Factor: {total_metrics.risk_factor:.4f}")

if __name__ == '__main__':
    main()
